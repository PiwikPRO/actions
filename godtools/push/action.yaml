name: 'Piwik PRO godtools docker image push'
description: 'Installs godtools'
inputs:
  godtools-config:
    required: true
    description: godtools encrypted configuration
  godtools-key:
    required: true
    description: godtools encryption key
  image:
    required: true
    description: Image, that should be pushed to the registry
  destination-tag:
    required: false
    default: ${{ github.ref_name }}
    description: Image tag, that should be pushed to the registry
  registries:
    required: false
    default: acr
    description: List of names of the registries where an image should be pushed (ecr, acr, docker-hub, internal-acr).
  tag-latest:
    required: false
    default: "true"
    description: Prepare desired tag from latest image before pushing it to the registry
  push-tmp-image:
    required: false
    default: "true"
    description: Push tmp image to the registry
  push-develop-image:
    required: false
    default: "false"
    description: Push `image:develop` from branch `develop` to the registry
  skip-signing:
    required: false
    default: "false"
    description: Don't sign pushed images. By default images are signed if tag is a valid semver.
runs:
  using: "composite"
  steps:
    - name: Push tmp docker image
      if: ${{ inputs.push-tmp-image == 'true' && !startsWith(github.ref, 'refs/tags') }}
      shell: bash
      run: |
        [ "${{ inputs.tag-latest }}" = "true" ] && docker tag ${{ inputs.image }} ${{ inputs.image }}:tmp-$(git rev-parse --short HEAD);
        godtools docker push --registry-id "${{ inputs.registries }}" ${{ inputs.image }}:tmp-$(git rev-parse --short HEAD)
      env:
        GODTOOLS_CONFIG: ${{ inputs.godtools-config }}
        GODTOOLS_KEY: ${{ inputs.godtools-key }}

    - name: Push develop docker image
      if: ${{ inputs.push-develop-image == 'true' && startsWith(github.ref, 'refs/heads/develop') }}
      shell: bash
      run: |
        [ "${{ inputs.tag-latest }}" = "true" ] && docker tag ${{ inputs.image }} ${{ inputs.image }}:develop;
        godtools docker push --registry-id "${{ inputs.registries }}" ${{ inputs.image }}:develop
      env:
        GODTOOLS_CONFIG: ${{ inputs.godtools-config }}
        GODTOOLS_KEY: ${{ inputs.godtools-key }}


    - name: Push production docker image
      if: startsWith(github.ref, 'refs/tags')
      shell: bash
      run: |
        [ "${{ inputs.tag-latest }}" = "true" ] && docker tag ${{ inputs.image }} ${{ inputs.image }}:${{ inputs.destination-tag }};
        godtools docker push --registry-id "${{ inputs.registries }}" ${{ inputs.image }}:${{ inputs.destination-tag }}
      env:
        GODTOOLS_CONFIG: ${{ inputs.godtools-config }}
        GODTOOLS_KEY: ${{ inputs.godtools-key }}


    - name: Check if tag should be signed
      id: sign_check
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      shell: bash
      run: |
        if [[ "${{ inputs.skip-signing }}" == 'true' ]]; then
          echo "::set-output name=should_sign::false"
          exit 0
        fi
        
        TAG_NAME=${GITHUB_REF/refs\/tags\//}
        SEMVER_REGEX="^v?(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-([0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*))?(\+([0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*))?$"
        if [[ "$TAG_NAME" =~ $SEMVER_REGEX ]]; then
          echo "::set-output name=should_sign::true"
        else
          echo "::set-output name=should_sign::false"
        fi    

    - name: Download image signing toolkit (cosign)
      if: ${{ steps.sign_check.outputs.should_sign == 'true' }}
      uses: PiwikPRO/actions/cosign/download@85b53606f434c343f5b885839b188a7376d38d12

    - name: Sign production docker image
      if: ${{ steps.sign_check.outputs.should_sign == 'true' }}
      shell: bash
      run: |
        godtools docker sign --registry-id "${{ inputs.registries }}" ${{ inputs.image }}:${{ inputs.destination-tag }}
      env:
        GODTOOLS_CONFIG: ${{ inputs.godtools-config }}
        GODTOOLS_KEY: ${{ inputs.godtools-key }}
