name: 'Tech-docs copier'
on:
  workflow_call:
    inputs:
      config:
        required: true
        type: string
      main_branch:
        default: master
        required: false
        type: string

jobs:
  docs:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      MAIN_BRANCH: ${{ inputs.main_branch }}
      TOKEN: ""
      TECH_DOCS_BRANCH: ""
      BRANCH_EXISTS: ""
      CHANGES: ""
    steps:

      - name: Check out repository code
        uses: actions/checkout@v3

      - uses: PiwikPRO/actions/github-app-token-generator@master
        name: Generate token for tech docs pusher
        id: get-token
        with:
          private-key: ${{ secrets.TECH_DOCS_PUSHER_PRIVATE_KEY }}
          app-id: ${{ secrets.TECH_DOCS_PUSHER_APPLICATION_ID }}
          repo: PiwikPRO/Tech-docs

      - name: Check out Tech-docs
        uses: actions/checkout@v3
        with:
          repository: 'PiwikPRO/Tech-docs'
          token: ${{ steps.get-token.outputs.token }}
          path: 'Tech-docs'

      - name: Set Tech-docs branch name
        if: github.ref_name != env.MAIN_BRANCH
        shell: bash
        run: |
          CURRENT_BRANCH="${{ github.ref_name }}"
          BRANCH=$(echo '${{ github.repository }}-'$CURRENT_BRANCH | sed 's/[^a-zA-Z0-9]/-/g;' | tr '[:upper:]' '[:lower:]'])
          echo "TECH_DOCS_BRANCH=$BRANCH" >> $GITHUB_ENV

      - name: Set Tech-docs branch name (master)
        if: github.ref_name == env.MAIN_BRANCH
        shell: bash
        run: |
          echo "TECH_DOCS_BRANCH=master" >> $GITHUB_ENV

      - name: Check Remote Branch Existence
        if: github.ref_name != env.MAIN_BRANCH
        run: |
          cd Tech-docs
          if git ls-remote --heads --exit-code origin $TECH_DOCS_BRANCH > /dev/null; then
            echo "Exists!"
            echo "BRANCH_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Doesn't exist!"
            echo "BRANCH_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Checkout Remote Branch
        if: github.ref_name != env.MAIN_BRANCH && env.BRANCH_EXISTS == 'true'
        run: |
          cd Tech-docs
          git fetch --depth 1 origin $TECH_DOCS_BRANCH
          git checkout $TECH_DOCS_BRANCH

      - name: Run Copy Script in Dry Run Mode
        id: dry-run
        uses: PiwikPRO/actions/techdocs@arch-256-add-comment-with-tech-docs-update
        if: ${{ github.ref_name == env.MAIN_BRANCH || env.BRANCH_EXISTS == 'true' }}
        with:
          from: .
          to: Tech-docs
          index: ${{ github.repository }}
          dry-run: true
          config: ${{ inputs.config }}

      - name: Check for Changes (Dry Run)
        if: github.ref_name == env.MAIN_BRANCH || env.BRANCH_EXISTS == 'true'
        run: |
          CHANGED_FILES=${{ steps.dry-run.outputs.count }}
          echo "Changed files count: $CHANGED_FILES"
          echo "CHANGES=$CHANGED_FILES" >> $GITHUB_ENV

      - name: Cleanup local branch if there are changes
        if: github.ref_name != env.MAIN_BRANCH && env.BRANCH_EXISTS == 'true' && env.CHANGES != '0'
        run: |
          cd Tech-docs
          git checkout master
          git branch -d $TECH_DOCS_BRANCH
          git checkout -b $TECH_DOCS_BRANCH

      - name: Create Branch if Not Exists
        if: github.ref_name != env.MAIN_BRANCH && env.BRANCH_EXISTS == 'false'
        run: |
          cd Tech-docs
          git checkout -b $TECH_DOCS_BRANCH
          echo "CHANGES=1" >> $GITHUB_ENV

      - name: Run Copy Script
        uses: PiwikPRO/actions/techdocs@arch-256-add-comment-with-tech-docs-update
        id: copy
        if: env.CHANGES != '0'
        with:
          from: .
          to: Tech-docs
          index: ${{ github.repository }}
          dry-run: false
          config: ${{ inputs.config }}

      - name: Check for Changes
        if: env.CHANGES != '0'
        run: |
          CHANGED_FILES=${{ steps.copy.outputs.count }}
          echo "Changed files count: $CHANGED_FILES"
          echo "CHANGES=$CHANGED_FILES" >> $GITHUB_ENV


      - name: Push changes to Tech-docs
        if: env.CHANGES != '0'
        run: |
          cd Tech-docs
          git config --global user.email "${{github.event.pusher.email}}"
          git config --global user.name "${{github.event.pusher.name}}"
          git add --all
          git commit -m "${{ github.event.head_commit.message }}"
          git push origin $TECH_DOCS_BRANCH --force


  pr:
    if: github.event_name == 'pull_request'
    # FIXME - pull-request    pull_request:  types: [ opened, synchronize ]
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write

    env:
      MAIN_BRANCH: ${{ inputs.main_branch }}
      TOKEN: ""
      TECH_DOCS_BRANCH: ""
      BRANCH_EXISTS: ""
      CHANGES: ""
    steps:

      - name: Check out repository code
        uses: actions/checkout@v3

      - uses: PiwikPRO/actions/github-app-token-generator@master
        name: Generate token for tech docs pusher
        id: get-token
        with:
          private-key: ${{ secrets.TECH_DOCS_PUSHER_PRIVATE_KEY }}
          app-id: ${{ secrets.TECH_DOCS_PUSHER_APPLICATION_ID }}
          repo: PiwikPRO/Tech-docs


      - name: Set Tech-docs branch names
        shell: bash
        run: |
          LOCAL_BASE_BRANCH=$(echo "${{ github.base_ref }}" | sed 's/refs\/heads\///')
          LOCAL_HEAD_BRANCH=$(echo "${{ github.head_ref }}" | sed 's/refs\/heads\///')
          TECH_DOCS_BASE_BRANCH=$(echo '${{ github.repository }}-'$LOCAL_BASE_BRANCH | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
          TECH_DOCS_HEAD_BRANCH=$(echo '${{ github.repository }}-'$LOCAL_HEAD_BRANCH | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
          echo "TECH_DOCS_BASE_BRANCH=$TECH_DOCS_BASE_BRANCH" >> $GITHUB_ENV
          echo "TECH_DOCS_HEAD_BRANCH=$TECH_DOCS_HEAD_BRANCH" >> $GITHUB_ENV
          echo "Base branch name: $TECH_DOCS_BASE_BRANCH"
          echo "Head branch name: $TECH_DOCS_HEAD_BRANCH"

      - name: Check out Tech-docs (base branch)
        id: checkout-base
        continue-on-error: true
        uses: actions/checkout@v3
        with:
          repository: 'PiwikPRO/Tech-docs'
          token: ${{ steps.get-token.outputs.token }}
          path: 'Tech-docs'


      - name: Detect if base Tech-docs branch exists
        if: env.TECH_DOCS_BASE_BRANCH != 'master'
        run: |
          cd Tech-docs
          if git ls-remote --heads --exit-code origin $TECH_DOCS_BASE_BRANCH > /dev/null; then
            echo "Exists!"
            echo "BRANCH_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Doesn't exist!"
            echo "BRANCH_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Checkout remote base branch if exists
        if: env.BRANCH_EXISTS == 'true'
        run: |
          cd Tech-docs
          git fetch --depth 1 origin $TECH_DOCS_BASE_BRANCH
          git checkout $TECH_DOCS_BASE_BRANCH

      - name: Run Copy Script in Dry Run Mode
        id: dry-run
        uses: PiwikPRO/actions/techdocs@arch-256-update-pr-description-with-details
        with:
          from: .
          to: Tech-docs
          index: ${{ github.repository }}
          dry-run: true
          config: ${{ inputs.config }}

      - name: Check for Changes (Dry Run)
        run: |
          COUNT=${{ steps.dry-run.outputs.count }}
          echo "COUNT=$COUNT" >> $GITHUB_ENV
          echo "Changed files count: $COUNT"

      - uses: PiwikPRO/actions/github-app-token-generator@master
        if: env.COUNT != '0'  # FIXME we need to check if there is a comment earlier before using that statement
        id: get-tech-docs-agent-token
        with:
          private-key: ${{ secrets.TECH_DOCS_AGENT_PRIVATE_KEY }}
          app-id: ${{ secrets.TECH_DOCS_AGENT_APPLICATION_ID }}

      - name: Prepare Pull Request Comment
        uses: actions/github-script@v7
        if: env.COUNT != '0'
        env:
          COUNT: ${{ env.COUNT }}
        with:
          github-token: ${{ steps.get-tech-docs-agent-token.outputs.token }}
          script: |
            const botName = "piwik-pro-tech-docs-agent[bot]"
            const diffCount = process.env.COUNT;
            const issue_number = context.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const description = `
              This PR contains changes to the documentation.
  
              * [Preview](https://docs.cldsrv.biz/${{ env.TECH_DOCS_HEAD_BRANCH }}/) (available after it's built, requires VPN)
              * If there are any issues with the preview, please check the [Tech-docs build logs](https://github.com/PiwikPRO/Tech-docs/actions/workflows/deploy.yaml)
  
              Docs affected by this PR:
  
              ${{ steps.dry-run.outputs.changes }}
              `
            
            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number,
            });
            
            // Filter for comments made by tech docs agent
            let techDocsComment = comments.data.find(comment => comment.user.login === botName);
            
            if (techDocsComment) {
              if (diffCount === 0) {
                await github.rest.issues.deleteComment({
                  owner,
                  repo,
                  comment_id: techDocsComment.id,
                });
                console.log('Deleted the comment.');
              } else {
                await github.rest.issues.updateComment({
                  owner,
                  repo,
                  comment_id: techDocsComment.id,
                  body: description,
                });
                console.log('Updated the comment.');
              }
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body: description
              });
              console.log('Created a new comment.');
            }
