name: 'Lint go project'
description: 'Sets up go and runs go linters'
inputs:
  go-version:
    required: false
    description: Version of go
    default: "1.20.x"
  
  golangci-lint-version:
    required: false
    description: Version of golangci-lint
    default: "v1.53.2"
  golangci-lint-concurrency:
    required: false
    description: Concurrency for golangci-lint
    default: 8
  golangci-lint-timeout:
    required: false
    description: Timeout for golangci-lint
    default: "300s"

  inclint:
    required: false
    description: If incremental checking of linter errors should be enabled
    default: "false"
  inclint-aws-access-key-id:
    required: false
    description: AWS Access Key ID used for storing amount of linter errors
  inclint-aws-secret-access-key:
    required: false
    description: AWS Secret Access Key used for storing amount of linter errors
  inclint-reporeader-private-key:
    required: true
    description: Private key for token generator application
  inclint-reporeader-application-id:
    required: true
    description: Application ID of token generator application
  inclint-threshold:
    required: false
    default: 1
    description: How many linter errors should be fixed with every PR

  goprivate-repos:
    required: false
    default: ""
    description: Allows setting GOPRIVATE variable before the tests are executed
  goprivate-reporeader-private-key:
    required: false
    description: Private key for token generator application
  goprivate-reporeader-application-id:
    required: true
    description: Application ID of token generator application
runs:
  using: "composite"
  steps:
    - name: Install Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ inputs.go-version }}

    - name: Configure private dependencies
      uses: PiwikPRO/actions/go/goprivate@master
      if: ${{ inputs.goprivate-repos != '' }}
      with:
        repos: ${{ inputs.goprivate-repos }}
        reporeader-private-key: ${{ inputs.goprivate-reporeader-private-key }}
        reporeader-application-id: ${{ inputs.goprivate-reporeader-application-id }}

    - name: Run linters
      if: ${{ inputs.inclint == 'false' }}
      # golangci-lint-action: 3.2.0 (commit of tag used instead of tag to avoid tag overwrite)
      uses: golangci/golangci-lint-action@537aa1903e5d359d0b27dbc19ddd22c5087f3fbc
      with:
        version: ${{ inputs.golangci-lint-version }}
        # Extended timeout to ensure all the linters are installed before it hits
        args: --concurrency ${{ inputs.golangci-lint-concurrency }} --exclude-use-default=false --timeout=${{ inputs.golangci-lint-timeout }}

    - name: Run linters (with incremental improvements)
      if: ${{ inputs.inclint == 'true' }}
      # golangci-lint-action: 3.2.0 (commit of tag used instead of tag to avoid tag overwrite)
      uses: golangci/golangci-lint-action@537aa1903e5d359d0b27dbc19ddd22c5087f3fbc
      with:
        version: ${{ inputs.golangci-lint-version }}
        args: --concurrency ${{ inputs.golangci-lint-concurrency }} --exclude-use-default=false --issues-exit-code=0 --timeout=${{ inputs.golangci-lint-timeout }} -c ${{ github.action_path }}/.golangci.yml

    - name: Generate PiwikPRO access token for inclint action
      uses: PiwikPRO/github-app-token-generator@v1
      if: ${{ inputs.inclint == 'true' }}
      id: get-token
      with:
        private-key: ${{ inputs.inclint-reporeader-private-key }}
        app-id: ${{ inputs.inclint-reporeader-application-id }}

    - name: Re-run linters (uses cache) to extract amount of linter errors
      if: ${{ inputs.inclint == 'true' }}
      shell: bash
      run: golangci-lint run --concurrency ${{ inputs.golangci-lint-concurrency }} --exclude-use-default=false --issues-exit-code=0 --timeout=${{ inputs.golangci-lint-timeout }}  --out-format tab -c ${{ github.action_path }}/.golangci.yml | tee /tmp/golangci-inclint-results.txt

    - name: Extract amount of linter errors
      if: ${{ inputs.inclint == 'true' }}
      id: get-linter-errors
      shell: bash
      run: echo "lintererrors=$(cat /tmp/golangci-inclint-results.txt | wc -l)" >> $GITHUB_OUTPUT

    - name: Export linter output as text
      if: ${{ inputs.inclint == 'true' }}
      id: get-linter-output
      shell: bash
      # Hacks in order to support multiline output :|
      run: |
          LINTER_OUTPUT=$(cat /tmp/golangci-inclint-results.txt)
          if [ -z "$LINTER_OUTPUT" ]
          then
                LINTER_OUTPUT="No linter errors! ðŸŽ‰"
          fi
          echo "LINTER_OUTPUT<<EOF" >> $GITHUB_ENV
          echo "$LINTER_OUTPUT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

    - uses: mshick/add-pr-comment@5cd99bf9c186219af43341076f1fe9c09e5a9934
      if: ${{ inputs.inclint == 'true' }}
      with:
        message: |
          ## Linter errors (${{ steps.get-linter-errors.outputs.lintererrors }})
          *please consider fixing some of them if the linter fails:*

          ${{ env.LINTER_OUTPUT }}"
        repo-token: ${{ steps.get-token.outputs.token }}

    - name: Generate SHA256 of golangci-lint config file
      if: ${{ inputs.inclint == 'true' }}
      id: get-config-sha
      shell: bash
      run: echo "linter-config-sha=$(sha256sum ${{ github.action_path }}/.golangci.yml | awk '{ print $1 }' | tr -d '\n')" >> $GITHUB_OUTPUT


    - name: Run inclint action
      uses: PiwikPRO/actions/inclint@master
      if: ${{ inputs.inclint == 'true' }}
      with:
        aws-access-key-id: ${{ inputs.inclint-aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.inclint-aws-secret-access-key }}
        head-linter-errors: ${{ steps.get-linter-errors.outputs.lintererrors }}
        linter-config-id: "${{ inputs.go-version }}-${{ inputs.golangci-lint-version }}-${{ steps.get-config-sha.outputs.linter-config-sha }}"
        threshold: ${{ inputs.inclint-threshold }}
