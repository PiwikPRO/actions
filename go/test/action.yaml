name: 'Test go project'
description: 'Sets up go and runs go tests'

inputs:
  go-version:
    required: false
    default: 1.23.x
    description: Go version
  go-packages:
    required: false
    default: cmd,internal,pkg
  cov:
    required: false
    description: If coverage should be enabled
    default: "false"
  cov-aws-access-key-id:
    required: false
    description: AWS Access Key ID used for storing coverage
  cov-aws-secret-access-key:
    required: false
    description: AWS Secret Access Key used for storing coverage
  cov-reporeader-private-key:
    required: true
    description: Private key for token generator application
  cov-reporeader-application-id:
    required: true
    description: Application ID of token generator application
  cov-threshold:
    required: false
    default: 80
    description: Application ID of token generator application

  
  goprivate-repos:
    required: false
    default: ""
    description: Allows setting GOPRIVATE variable before the tests are executed
  goprivate-reporeader-private-key:
    required: false
    description: Private key for token generator application
  goprivate-reporeader-application-id:
    required: false
    description: Application ID of token generator application

  timeout:
    required: false
    default: 10
    description: Timeout for the tests

runs:
  using: "composite"
  steps:

    - name: Install Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ inputs.go-version }}

    - name: Configure private dependencies
      uses: PiwikPRO/actions/go/goprivate@master
      if: ${{ inputs.goprivate-repos != '' }}
      with:
        repos: ${{ inputs.goprivate-repos }}
        reporeader-private-key: ${{ inputs.goprivate-reporeader-private-key }}
        reporeader-application-id: ${{ inputs.goprivate-reporeader-application-id }}

    - name: Run tests
      shell: bash
      run: | 
        # Iterates over whatever is in "inputs.go-packages" and filters out non-existing directories 
        EXISTING_DIRS=$(echo "${{ inputs.go-packages }}" | tr ',' '\n' | while read dir; do if [ -d "$dir" ]; then printf "%s," "$dir"; fi; done | sed 's/,$/\n/')

        # Runs the tests formatting the above variable to format accepted by go test and -coverpkg (./foo/... ./bar/... and ./foo/...,./bar/... respectively)
        go test $(echo $EXISTING_DIRS | sed 's/[^,]*/\.\/&\/.../g; s/,/ /g') -v -coverpkg=$(echo $EXISTING_DIRS | sed 's/[^,]*/\.\/&\/.../g') -coverprofile cover.out -timeout ${{ inputs.timeout }}

    - name: Extract coverage
      if: ${{ inputs.cov == 'true' }}
      id: get-coverage
      shell: bash
      run: echo "coverage=$(go tool cover -func cover.out | grep 'total:' | awk '{print substr($3, 1, length($3)-1)}')" >> $GITHUB_OUTPUT

    - name: Generate PiwikPRO access token for coverage action
      uses: PiwikPRO/github-app-token-generator@v1
      if: ${{ inputs.cov == 'true' }}
      id: get-token
      with:
        private-key: ${{ inputs.cov-reporeader-private-key }}
        app-id: ${{ inputs.cov-reporeader-application-id }}

    - name: Run coverage action
      uses: PiwikPRO/actions/coverage@master
      if: ${{ inputs.cov == 'true' }}
      with:
        aws-access-key-id: ${{ inputs.cov-aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.cov-aws-secret-access-key }}
        head-coverage: ${{ steps.get-coverage.outputs.coverage }}
        github-token: ${{ steps.get-token.outputs.token }}
        threshold: ${{ inputs.cov-threshold }}
